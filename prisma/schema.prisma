// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  posts           Post[]
  writtenComments Comment[]
  leavedLikes     Like[]

  friends            User[]   @relation("UserFriends", fields: [friendsIds], references: [id])
  friendsIds         String[] @db.ObjectId
  // friendsRelation only to store m-n relation
  friendsRelation    User[]   @relation("UserFriends", fields: [friendsRelationIds], references: [id])
  friendsRelationIds String[] @db.ObjectId

  firstName      String
  lastName       String
  username       String?   @unique
  email          String?   @unique
  phoneNumber    String?   @unique // Didn't add any validation of this field
  facebookId     String?   @unique
  googleId       String?   @unique
  city           String?
  birthday       DateTime?
  profilePicture String?
  password       String? // Actually hashed password
}

// It would be better to add Entity model and models like Post, Comment would have 1-1 relations with that model,
// so Like would only have one realtion with Entity instead of post and comment that are now.
// Then Comment would also have relation with Entity in replacement of post, because User can theorethicaly comment not only Posts.
model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  content   String
  author    User      @relation(references: [id], fields: [authorId], onDelete: Cascade, onUpdate: Cascade)
  authorId  String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String
  author    User     @relation(references: [id], fields: [authorId], onUpdate: Cascade)
  authorId  String   @db.ObjectId
  post      Post     @relation(references: [id], fields: [postId], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.ObjectId
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  author    User     @relation(references: [id], fields: [authorId], onUpdate: Cascade)
  authorId  String   @db.ObjectId

  post   Post?   @relation(references: [id], fields: [postId], onDelete: Cascade, onUpdate: Cascade)
  postId String? @db.ObjectId

  comment   Comment? @relation(references: [id], fields: [commentId], onDelete: Cascade, onUpdate: Cascade)
  commentId String?  @db.ObjectId
}

model ActiveAccessTokens {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  token  String
  userId String @db.ObjectId
}

model FriendsRequest {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  from String @db.ObjectId
  to   String @db.ObjectId
}

// auxiliary model for User model proper working
model UserUniqueValuesIds {
  id    String @id @default(cuid()) @map("_id")
  field String
}
